std::string_view nl80211_bss_string(nl80211_bss v)
{
	switch(v) {
		case __NL80211_BSS_INVALID: return "__NL80211_BSS_INVALID";
		case NL80211_BSS_BSSID: return "NL80211_BSS_BSSID";
		case NL80211_BSS_FREQUENCY: return "NL80211_BSS_FREQUENCY";
		case NL80211_BSS_TSF: return "NL80211_BSS_TSF";
		case NL80211_BSS_BEACON_INTERVAL: return "NL80211_BSS_BEACON_INTERVAL";
		case NL80211_BSS_CAPABILITY: return "NL80211_BSS_CAPABILITY";
		case NL80211_BSS_INFORMATION_ELEMENTS: return "NL80211_BSS_INFORMATION_ELEMENTS";
		case NL80211_BSS_SIGNAL_MBM: return "NL80211_BSS_SIGNAL_MBM";
		case NL80211_BSS_SIGNAL_UNSPEC: return "NL80211_BSS_SIGNAL_UNSPEC";
		case NL80211_BSS_STATUS: return "NL80211_BSS_STATUS";
		case NL80211_BSS_SEEN_MS_AGO: return "NL80211_BSS_SEEN_MS_AGO";
		case NL80211_BSS_BEACON_IES: return "NL80211_BSS_BEACON_IES";
		case NL80211_BSS_CHAN_WIDTH: return "NL80211_BSS_CHAN_WIDTH";
		case NL80211_BSS_BEACON_TSF: return "NL80211_BSS_BEACON_TSF";
		case NL80211_BSS_PRESP_DATA: return "NL80211_BSS_PRESP_DATA";
		case NL80211_BSS_LAST_SEEN_BOOTTIME: return "NL80211_BSS_LAST_SEEN_BOOTTIME";
		case NL80211_BSS_PAD: return "NL80211_BSS_PAD";
		case NL80211_BSS_PARENT_TSF: return "NL80211_BSS_PARENT_TSF";
		case NL80211_BSS_PARENT_BSSID: return "NL80211_BSS_PARENT_BSSID";
		case NL80211_BSS_CHAIN_SIGNAL: return "NL80211_BSS_CHAIN_SIGNAL";
		case NL80211_BSS_FREQUENCY_OFFSET: return "NL80211_BSS_FREQUENCY_OFFSET";
		case NL80211_BSS_MLO_LINK_ID: return "NL80211_BSS_MLO_LINK_ID";
		case NL80211_BSS_MLD_ADDR: return "NL80211_BSS_MLD_ADDR";

		/* keep last */
		case __NL80211_BSS_AFTER_LAST: return "__NL80211_BSS_AFTER_LAST";
	}
	return "Unknown";
}
